Вы разрабатываете программу для нестандартной архитектуры,
для которой менеджера памяти ещё не существуют, и вам требуется написать свой.

Память в архитектуре представлена фиксированным количеством ячеек, пронумерованных от 0 до N - 1. 
Каждая ячейка — один байт.
Ваш менеджер имеет прямой доступ к этой памяти и должен уметь по запросу выделять непрерывные отрезки из ячеек. 

Запросы бывают двух типов:
    malloc(n), где n — запрашиваемое количество ячеек памяти.
    Менеджер должен вернуть номер ячейки, начиная с которой он выделяет отрезок длиной n.
    После этого последующие запросы к malloc() не могут выделять ячейки из этого отрезка, 
    пока он не будет освобождён при помощи free().

    free(i), где i — это индекс ячейки, которую когда-то вернул malloc().
    Функция должна вернуть -1, если в ячейке i не начинается никакой выделенный отрезок, и 0 в противном случае.

Во время работы менеджера вся память будет разбита на отрезки из занятых и свободных ячеек.
При обработке запроса malloc(n) менеджер обязан один из свободных отрезков разбить на два: 
подотрезок длиной n, который он пометит как занятый, и подотрезок из всех оставшихся ячеек,
если они есть, который вновь будет свободным.

При обработке free(i) менеджер должен пометить соответствующий отрезок как свободный,
после чего объединить его с находящимися вплотную к нему другими свободными отрезками, если таковые имеются.
В силу особенностей кэширования в этой архитектуре,
чем меньше времени прошло с создания менеджером нового свободного отрезка памяти,
тем быстрее можно снова получить к нему доступ.
Поэтому при обработке запроса malloc(n) среди всех свободных отрезков вам нужно выбрать тот,
который был освобожден позднее остальных, а внутри него выбрать самый левый подотрезок.

Отметим, что менеджер создаёт новые свободные отрезки в двух случаях:
 - Когда внутри одного свободного отрезка выделяется память. 
   В этом случае старый свободный отрезок уничтожается и возникает новый, меньшего размера. 
 - Когда занятый отрезок освобождается и вместо него появляется свободный, возможно,
   объединяясь при этом с соседними свободными.
   Если длина наиболее недавнего свободного отрезка меньше n, то malloc() должен вернуть -1.