b) База данных содержит записи о 10 000 клиентов в отсортированном порядке. 
    Из них 40% считаются хорошими клиентами, т.е. на них приходится в сумме 60% обращений к базе данных. 
    Такую базу данных и поиск в ней можно реализовать двумя способами:
    1) поместить все записи в один массив и выполнять поиск требуемого клиента посредством двоичного поиска.
    2) поместить хороших клиентов в один массив, а остальных в другой. Двоичный поиск сначала выполняется в первом массиве, 
       и только в случае отрицательного результата - во втором.
    Выясните, какой из этих подходов дает лучшую ожидаемую производительность.
    Будут ли результаты иными, если в обоих случаях вместо двоичного поиска применить линейный поиск в неотсортированном массиве?

///////////////

n = 10000
k = 4000
m = 6000

перший варіант буде найкращим по кількості операцій для відсортованих даних
пошук по всім 10000 займатиме log n і якщо просто порахувати кількість операцій то виходить
що для 10000 зробимо порядка 13 порівнянь
в випадку розділення масиву log n від 4000 рівний 10 що не набагато більше пошуку в цілому масиві
а якщо ділити на дві частини то в 40% відсотках випадків кількість операцій = O(log k) + O(log m) = 10 + 12 = 22

для випадку з невідсортованими даними
навпаки краще виконувати пошук спочатку для хороших клієнтів
так вийде що в 60% складність буде O(k) і в 40% випадків O(n) 


не знайшов не вірні розрахунки
для прикладу попередніх підріхував кількість порівнянь при бін пошуку

users = []
for i in range(10000): users.append(i + 1)

all = users
good = users[:4000]
bad = users[4000:]

# Для всіх клієнтів, стабільно буде виконуватись за log n
bs(50, all, 'all') # операцій = 12

# ситуція "хороших" клієнтів (60% відсотків запитів), log від 4000 не сильно виграє в порінянні з log 10000
bs(50, good, 'good')  # операцій = 10

# ситуція коли пошук протідно проводити для "не хороших" клієнтів, 
# якщо так виконувати пошук в 40% відсотків запитів буде просадка
bs(8000, good, 'good') # notfind, операцій = 12 
bs(8000, bad, 'bad') # операцій = 13

для випадку з невідсортованими даними
навпаки краще виконувати пошук спочатку для хороших клієнтів
так вийде що в 60% відсотків запитів складність буде O(4000)
і в 40% відсотків запитів випадків O(10000) 

...
відповідь дізнаюсь на розборі)